{"version":3,"file":"fab.component.d.ts","sources":["fab.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { FivLoadingProgressBar } from './../loading-progress-bar/loading-progress-bar.component';\nimport { OnInit, EventEmitter, Renderer2, OnDestroy, AfterContentInit, TemplateRef } from '@angular/core';\nimport { FivSpinner } from '../spinner/spinner.component';\nimport { IonContent, IonLabel, Platform } from '@ionic/angular';\nimport { Subject } from 'rxjs';\nexport declare class FivFab implements OnInit, OnDestroy, AfterContentInit {\n    private renderer;\n    platform: Platform;\n    private content;\n    vertical?: 'top' | 'middle' | 'bottom' | 'none';\n    horizontal?: 'center' | 'start' | 'end' | 'none';\n    mode?: 'normal' | 'edge';\n    slot: string;\n    spinColor: string;\n    color: string;\n    disabled: boolean;\n    visible: boolean;\n    pulse: boolean;\n    animationDisabled: boolean;\n    scroll: boolean;\n    _scroll: boolean;\n    feature: TemplateRef<any>;\n    fivComplete: EventEmitter<FivFab>;\n    fivRefresh: EventEmitter<FivFab>;\n    fivHidden: EventEmitter<FivFab>;\n    fivShow: EventEmitter<FivFab>;\n    fivTransition: EventEmitter<FivFab>;\n    spinner: FivSpinner;\n    bar: FivLoadingProgressBar;\n    labelComp: IonLabel;\n    loading: boolean;\n    extended: boolean;\n    iconState: string;\n    currentDeltaY: number;\n    $onDestroy: Subject<unknown>;\n    constructor(renderer: Renderer2, platform: Platform, content: IonContent);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    load(): void;\n    unload(): void;\n    complete(): void;\n    fillAnimationDone(): void;\n    rotate(progress: number): void;\n    fabAnimDone(event: any): void;\n}\nexport interface FabTransitionEvent {\n    from: FabState;\n    to: FabState;\n}\nexport declare enum FabState {\n    HIDDEN = 0,\n    NORMAL = 1,\n    EXTENDED = 2\n}\n"]}